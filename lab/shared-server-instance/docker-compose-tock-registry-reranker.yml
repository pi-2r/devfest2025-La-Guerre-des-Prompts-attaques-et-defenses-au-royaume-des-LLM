# WARNING to run this you need to ensure that vm.max_map_count is correctly configured
# See https://opensearch.org/docs/latest/install-and-configure/install-opensearch/docker#important-host-settings
# We recommande having at least 40Gb free space on your disk to prevent this error : https://stackoverflow.com/a/67767478
#   If you have less and something goes wrong at the cluster boot check that you don't have any logs "high disk watermark [90%] exceeded"
#   if so make some free space a few Gb until this error desapear.

services:
  mongo:
    image: "${PLATFORM}mongo:${MONGO}"
    volumes:
      - tockmongo:/data/db
    ports:
      - "27017:27017"
    command: --bind_ip_all --port 27017 --replSet "tock"

  mongo2:
    image: "${PLATFORM}mongo:${MONGO}"
    depends_on:
      - mongo
    volumes:
      - tockmongo2:/data/db
    ports:
      - "27018:27018"
    command: --bind_ip_all --port 27018 --replSet "tock"

  mongo3:
    image: "${PLATFORM}mongo:${MONGO}"
    depends_on:
      - mongo
      - mongo2
    volumes:
      - tockmongo3:/data/db
    ports:
      - "27019:27019"
    command: --bind_ip_all --port 27019 --replSet "tock"

  mongo-setup:
    image: "${PLATFORM}mongo:${MONGO}"
    depends_on:
      - "mongo"
      - "mongo2"
      - "mongo3"
    links:
      - mongo:mongo
      - mongo2:mongo2
      - mongo3:mongo3
    volumes:
      - ./scripts:/scripts
    environment:
      - MONGO1=mongo
      - MONGO2=mongo2
      - MONGO3=mongo3
      - RS=tock
    entrypoint: ["/scripts/setup.sh"]

  build_worker:
    image: "${PLATFORM}tock/build_worker:${TAG}"
    depends_on:
      - mongo
      - mongo2
      - mongo3
    environment:
      - tock_mongo_url=mongodb://mongo:27017,mongo2:27018,mongo3:27019/?replicaSet=tock
      - tock_env=prod
      - JAVA_ARGS=-Xmx1g -XX:MaxMetaspaceSize=256m
    #  - tock_default_log_level=warn
    #  - tock_service_log_level=info
    #  - tock_database_log_level=warn

  # duckling:
  #   image: "${PLATFORM}tock/duckling:${TAG}"
  #   environment:
  #     - tock_env=prod
  #     # - tock_default_log_level=warn
  #     # - tock_service_log_level=info
  #     # - tock_database_log_level=warn
  #   expose:
  #     - "8080"

  # kotlin_compiler:
  #   image: "${PLATFORM}tock/kotlin_compiler:${TAG}"
  #   environment:
  #     - tock_env=prod
  #     - tock_kotlin_compiler_classpath=/maven
  #   #      - tock_default_log_level=warn
  #   #      - tock_service_log_level=info
  #   #      - tock_database_log_level=warn
  #   expose:
  #     - "8080"

  admin_web:
    image: "${PLATFORM}tock/bot_admin:${TAG}"
    depends_on:
      - mongo
      - mongo2
      - mongo3
      # - duckling
      # - kotlin_compiler
    environment:
      no_proxy: duckling,bot_api,kotlin_compiler
      NO_PROXY: duckling,bot_api,kotlin_compiler
      tock_mongo_url: mongodb://mongo:27017,mongo2:27018,mongo3:27019/?replicaSet=tock
      nlp_duckling_url: http://duckling:8080
      tock_env: prod
      tock_file_upload_directory: file-uploads # custom directory for vert.x upload file system
      tock_namespace_open_access: true # Enabling/Disabling bot synchronization feature
      tock_bot_admin_rest_default_base_url: http://bot_api:8080
      tock_bot_compiler_service_url: http://kotlin_compiler:8080
      tock_configuration_bot_default_base_url: http://bot_api:8080
      tock_gen_ai_orchestrator_server_url: http://gen_ai_orchestrator-server:8000
      tock_gen_ai_orchestrator_client_request_timeout_ms: 55000
      tock_gen_ai_orchestrator_technical_error: Technical error :( sorry!
      #remove this in production
      tock_https_env: false
      botadminverticle_body_limit: -1
      tock_users: cendrillon@mythos.world,blanche.neige@mythos.world,belle.dormant@mythos.world,chaperon.rouge@mythos.world,hansel@mythos.world,gretel@mythos.world,chat.botte@mythos.world,barbe.bleue@mythos.world,petite.sirene@mythos.world,roi.arthur@mythos.world,merlin@mythos.world,lancelot@mythos.world,guenievre@mythos.world,morgane@mythos.world,perceval@mythos.world,petit.poucet@mythos.world,rumpelstiltskin@mythos.world,raiponce@mythos.world,pinocchio@mythos.world,aladdin@mythos.world,ali.baba@mythos.world,sinbad@mythos.world,sheherazade@mythos.world,genie.lampe@mythos.world,peter.pan@mythos.world,wendy@mythos.world,crochet@mythos.world,clochette@mythos.world,petit.prince@mythos.world,robin.bois@mythos.world,marianne@mythos.world,nottingham@mythos.world,bete@mythos.world,belle@mythos.world,vilain.canard@mythos.world,reine.neiges@mythos.world,gerda@mythos.world,flute.hamelin@mythos.world,pere.noel@mythos.world,jack.frost@mythos.world,baba.yaga@mythos.world,koschei@mythos.world,thor@mythos.world,loki@mythos.world,odin@mythos.world,freyja@mythos.world,hercule@mythos.world,persee@mythos.world,meduse@mythos.world,zeus@mythos.world,hades@mythos.world,poseidon@mythos.world,ulysse@mythos.world,penelope@mythos.world,achille@mythos.world,hector@mythos.world,oedipe@mythos.world,antigone@mythos.world,pandore@mythos.world,promethee@mythos.world,orphee@mythos.world,eurydice@mythos.world,tristan@mythos.world,iseult@mythos.world,beowulf@mythos.world,grendel@mythos.world,mulan@mythos.world,sunwukong@mythos.world,nezha@mythos.world,momotaro@mythos.world,urashima@mythos.world,kaguya@mythos.world,tengu@mythos.world,yukionna@mythos.world,anansi@mythos.world,ogun@mythos.world,nzinga@mythos.world,maui@mythos.world,pele@mythos.world,quetzalcoatl@mythos.world,kukulkan@mythos.world,popocatepetl@mythos.world,llorona@mythos.world,elcid@mythos.world,quichotte@mythos.world,sancho@mythos.world,faust@mythos.world,mephisto@mythos.world,dracula@mythos.world,frankenstein@mythos.world,golem@mythos.world,oberon@mythos.world,titania@mythos.world,leprechaun@mythos.world,kraken@mythos.world,minotaure@mythos.world,ariane@mythos.world,thesee@mythos.world,jason@mythos.world,medee@mythos.world
      tock_passwords: password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password,password
      tock_organizations: cendrillon,blanche.neige,belle.dormant,chaperon.rouge,hansel,gretel,chat.botte,barbe.bleue,petite.sirene,roi.arthur,merlin,lancelot,guenievre,morgane,perceval,petit.poucet,rumpelstiltskin,raiponce,pinocchio,aladdin,ali.baba,sinbad,sheherazade,genie.lampe,peter.pan,wendy,crochet,clochette,petit.prince,robin.bois,marianne,nottingham,bete,belle,vilain.canard,reine.neiges,gerda,flute.hamelin,pere.noel,jack.frost,baba.yaga,koschei,thor,loki,odin,freyja,hercule,persee,meduse,zeus,hades,poseidon,ulysse,penelope,achille,hector,oedipe,antigone,pandore,promethee,orphee,eurydice,tristan,iseult,beowulf,grendel,mulan,sunwukong,nezha,momotaro,urashima,kaguya,tengu,yukionna,anansi,ogun,nzinga,maui,pele,quetzalcoatl,kukulkan,popocatepetl,llorona,elcid,quichotte,sancho,faust,mephisto,dracula,frankenstein,golem,oberon,titania,leprechaun,kraken,minotaure,ariane,thesee,jason,medee
      tock_roles: nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin,nlpUser|botUser|admin|technicalAdmin
      tock_default_log_level: debug
      tock_service_log_level: debug
      tock_gen_ai_orchestrator_vector_store_provider: PGVector
    ports:
      - "80:8080"

  nlp_api:
    image: "${PLATFORM}tock/nlp_api:${TAG}"
    depends_on:
      - mongo
      - mongo2
      - mongo3
      # - duckling
    environment:
      - no_proxy=duckling #Prevent traffic from using environment proxy
      - NO_PROXY=duckling
      - tock_mongo_url=mongodb://mongo:27017,mongo2:27018,mongo3:27019/?replicaSet=tock
      - nlp_duckling_url=http://duckling:8080
      - tock_env=prod
      - tock_web_use_default_cors_handler=true
      - tock_web_use_default_cors_handler_with_credentials=false
      - tock_web_use_default_cors_handler_url=*
    #      - tock_default_log_level=warn
    #      - tock_service_log_level=info
    #      - tock_database_log_level=warn
    ports:
      - "8888:8080"

  bot_api:
    image: "${PLATFORM}tock/bot_api:${TAG}"
    depends_on:
      - mongo
      - mongo2
      - mongo3
      - nlp_api
    environment:
      - no_proxy=nlp_api #Prevent traffic from using environment proxy
      - NO_PROXY=nlp_api
      - tock_mongo_url=mongodb://mongo:27017,mongo2:27018,mongo3:27019/?replicaSet=tock
      - tock_nlp_service_url=http://nlp_api:8080
      - tock_env=integ
      - tock_websocket_enabled=true
      - tock_gen_ai_orchestrator_server_url=http://gen_ai_orchestrator-server:8000
      - tock_gen_ai_orchestrator_client_request_timeout_ms=55000
      - tock_gen_ai_orchestrator_technical_error=Technical error :( sorry!
      - tock_gen_ai_orchestrator_document_number_neighbors=2
      - tock_gen_ai_orchestrator_dialog_number_messages=5
      - tock_gen_ai_orchestrator_rag_debug_enabled=true
      - tock_gen_ai_orchestrator_vector_store_provider=PGVector
      - tock_web_use_default_cors_handler=true
    #      - tock_default_log_level=warn
    #      - tock_service_log_level=info
    #      - tock_database_log_level=warn
    ports:
      - "8080:8080"

  postgres-db:
    image: "${PLATFORM}pgvector/pgvector:${POSTGRES_TAG}"
    ports:
      - 5433:5432
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "[ -f /var/lib/postgresql/data/db_init_completed ] && pg_isready -U postgres"]
      interval: 5s
      timeout: 20s
      retries: 15
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=ChangeMe
    volumes:
      - pgvector-postgres-vl:/var/lib/postgresql/data
      - ./scripts/init-pgvect.sql:/docker-entrypoint-initdb.d/init.sql

  gen_ai_orchestrator-server:
    image: "${PLATFORM}tock/gen-ai-orchestrator-server:${TAG}"
    ports:
      - "8000:8000"
    extra_hosts:
      host.docker.internal: host-gateway
      ollama-server: "${OLLAMA_SERVER}"
      gpu-server.lan: host-gateway # Needed for reranker access
    environment:
      no_proxy: host.docker.internal,ollama-server,langfuse-server,localhost
      NO_PROXY: host.docker.internal,ollama-server,langfuse-server,localhost
      tock_gen_ai_orchestrator_application_environment: DEV
      tock_gen_ai_orchestrator_em_provider_timeout: 120
      tock_gen_ai_orchestrator_llm_provider_timeout: 120
      tock_gen_ai_orchestrator_llm_provider_max_retries: 0
      tock_gen_ai_orchestrator_vector_store_provider: PGVector
      tock_gen_ai_orchestrator_vector_store_host: postgres-db
      tock_gen_ai_orchestrator_vector_store_port: 5432
      tock_gen_ai_orchestrator_vector_store_user: postgres
      tock_gen_ai_orchestrator_vector_store_pwd: ChangeMe
      tock_gen_ai_orchestrator_vector_store_database: postgres
      tock_gen_ai_orchestrator_vector_store_timeout: 5
      tock_gen_ai_orchestrator_vector_store_k: 4
      tock_gen_ai_orchestrator_vector_store_test_query: virement bancaire
      tock_gen_ai_orchestrator_vector_store_secret_manager_provider:
      tock_gen_ai_orchestrator_vector_store_credentials_secret_name:

  # Copy from https://github.com/langfuse/langfuse/blob/main/docker-compose.yml
  # langfuse-server:
  #   image: ${PLATFORM}langfuse/langfuse:${LANGFUSE_TAG}
  #   depends_on:
  #     postgres-db:
  #       condition: service_healthy
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - DATABASE_URL=postgresql://langfuse:langfuse@postgres-db:5432/langfuse
  #     - NEXTAUTH_SECRET=mysecret
  #     - SALT=mysalt
  #     - NEXTAUTH_URL=http://tock.lan:3000
  #     - TELEMETRY_ENABLED=${TELEMETRY_ENABLED:-true}
  #     - LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES=${LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES:-false}

  docker_registry:
    image: registry:3
    restart: always
    volumes:
      - ./data/docker_registry:/var/lib/registry
    ports:
      - "6000:6000"

  # See https://github.com/wbuntu/images/tree/master/ai/ollama-registry
  ollama_registry_proxy:
    image: wbuntu/ollama-registry:v0.1
    ports:
      - "9200:8080"
    volumes:
      # Using a local directory for the cache to prevent any model loss that would occur using "docker compose down -v" option
      - ./data/ollama_registry:/data

  # Uses to serve the data set
  static_file_server:
    image: caddy:alpine
    ports:
      - "8088:80"
    volumes:
      - ./data/static_file_server/Caddyfile:/etc/caddy/Caddyfile
      - ./data/static_file_server/static_files/:/usr/share/caddy

volumes:
  tockmongo:
  tockmongo2:
  tockmongo3:

  pgvector-postgres-vl:
    driver: local

